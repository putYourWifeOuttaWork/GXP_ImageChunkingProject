Here's a contextual rundown:

Core Purpose:
The primary goal of the application is to provide a robust system for field users to log observations, ensuring data integrity and enabling deep analytics for informed decision-making. It aims to facilitate efficient data collection in the field, even with offline capabilities, and then centralize this data for comprehensive reporting and analysis.

Key Features:

User Management & Access Control: The system supports user authentication, role-based access control (Admin, Edit, Respond, ReadOnly), and company-level administration, allowing for granular control over who can access and modify data.
Program and Site Management: Users can create and manage pilot programs, which serve as overarching projects. Within each program, multiple sites can be defined, representing specific agricultural locations or facilities.
Submission Data Collection: Field users can create submissions for each site, recording environmental data such as temperature, humidity, airflow, and weather conditions.
Observation Logging: The core of the application involves capturing detailed observations for:
Petri Dishes: Recording petri code, fungicide usage, water schedules, and placement details, often accompanied by images.
Gasifiers: Logging gasifier code, chemical type, measurement readings, anomaly flags, and placement information, also with image support.
Offline Capabilities: The application is designed to work offline, storing data locally using IndexedDB and synchronizing it with the backend when an internet connection is available.
Image Capture & Processing: It supports direct image capture for observations. A notable feature is the specialized "split image processing" for petri observations, where a single photo can capture two petri dishes, which are then processed and linked to separate observation records.
Collaboration & Session Management: The system tracks active data entry sessions, allowing users to resume their work and potentially share sessions with other team members for collaborative data entry or escalation.
Audit Logging: A comprehensive audit trail is maintained for all changes to pilot programs, sites, submissions, and observations, ensuring compliance and traceability.
Custom Reporting: None yet - D3 library must be used, multi-dimensional, multi-variate reporting tabular analysis is our intended version 1, and customizable, suitable visualizations (d3) go on top. Finally, animations using D3, again, must be the highest level, for time-series data, such as a Site over the course of a Program time-frame (phase) and the mold growth index of each petri dish therein, over time (SVG growth using contours for heatmapping etc, for example)
Technical Stack:
--------
Frontend: Built with React, TypeScript, and styled using Tailwind CSS, running on Vite.
State Management: Utilizes Zustand for global state and React Query for server state management and caching.
Backend: Powered by Supabase, leveraging its PostgreSQL database, authentication services, storage for images, and Edge Functions for server-side logic and data processing.
Data Visualization: Integrates Chart.js for displaying analytics. - Future state MUST be based on a D3 library and should utilize top of the line science focused reporting for business validation of scientific ventures.
-------
Form Handling: Uses Formik and Yup for robust form validation. - Currently using tanstack - reactQuery for robust cacheing - Required because forms are refreshed auto-matically every time app comes into focus - or formik bugs out.  
Offline Support: Implements IndexedDB for local data storage.
-------
Data Architecture & Integrity:
The application's data model is hierarchical, starting from pilot_programs, which contain sites, which in turn contain submissions. Each submission can have multiple petri_observations and gasifier_observations. This structure is crucial for organizing data logically and facilitating deep, granular analytics. Data integrity is a paramount concern, with the database schema incorporating various enums, constraints, and triggers to ensure data consistency and accuracy. The recent updates also focus on accurately tracking program phase information (total days in phase, current day of phase) for both petri and gasifier observations, which is vital for time-series analysis and growth progression tracking.

SCHEMA: 
-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.async_error_logs (
  log_id bigint NOT NULL DEFAULT nextval('async_error_logs_log_id_seq'::regclass),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  table_name text NOT NULL,
  trigger_name text NOT NULL,
  function_name text NOT NULL,
  payload jsonb DEFAULT '{}'::jsonb,
  http_method text,
  endpoint text,
  status text NOT NULL DEFAULT 'error'::text,
  error_message text,
  error_details jsonb,
  request_id bigint,
  retry_count integer NOT NULL DEFAULT 0,
  next_retry_at timestamp with time zone,
  completed_at timestamp with time zone,
  CONSTRAINT async_error_logs_pkey PRIMARY KEY (log_id)
);
CREATE TABLE public.companies (
  company_id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL UNIQUE,
  description text,
  website character varying,
  logo_url text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  default_weather USER-DEFINED DEFAULT 'Clear'::weather_enum,
  CONSTRAINT companies_pkey PRIMARY KEY (company_id)
);
CREATE TABLE public.custom_reports (
  report_id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text,
  created_by_user_id uuid NOT NULL,
  company_id uuid NOT NULL,
  program_id uuid,
  configuration jsonb NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT custom_reports_pkey PRIMARY KEY (report_id),
  CONSTRAINT custom_reports_program_id_fkey FOREIGN KEY (program_id) REFERENCES public.pilot_programs(program_id),
  CONSTRAINT custom_reports_created_by_user_id_fkey FOREIGN KEY (created_by_user_id) REFERENCES auth.users(id),
  CONSTRAINT custom_reports_company_id_fkey FOREIGN KEY (company_id) REFERENCES public.companies(company_id)
);
CREATE TABLE public.gasifier_observations (
  observation_id uuid NOT NULL DEFAULT gen_random_uuid(),
  submission_id uuid NOT NULL,
  site_id uuid NOT NULL,
  gasifier_code text NOT NULL,
  image_url text,
  chemical_type USER-DEFINED NOT NULL DEFAULT 'Citronella Blend'::chemical_type_enum,
  measure numeric CHECK (measure >= 0::numeric AND measure <= 10::numeric),
  anomaly boolean NOT NULL DEFAULT false,
  notes text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  lastupdated_by uuid,
  program_id uuid,
  placement_height USER-DEFINED,
  directional_placement USER-DEFINED,
  placement_strategy USER-DEFINED,
  last_updated_by_user_id uuid,
  last_edit_time timestamp with time zone DEFAULT now(),
  outdoor_temperature numeric,
  outdoor_humidity numeric,
  order_index integer,
  position_x numeric,
  position_y numeric,
  footage_from_origin_x numeric DEFAULT '0'::numeric CHECK (footage_from_origin_x >= 0::numeric),
  footage_from_origin_y numeric DEFAULT '0'::numeric CHECK (footage_from_origin_y >= 0::numeric),
  linear_reading real,
  linear_reduction_nominal real DEFAULT '6'::real CHECK (linear_reduction_nominal < 6.01::double precision),
  linear_reduction_per_day real DEFAULT '6'::real CHECK (linear_reduction_per_day < 6.1::double precision),
  flow_rate real DEFAULT '6'::real,
  flag_for_review boolean DEFAULT false,
  daysinthisprogramphase numeric DEFAULT 0,
  todays_day_of_phase numeric DEFAULT 0,
  yesterday_reading numeric DEFAULT '6'::numeric,
  CONSTRAINT gasifier_observations_pkey PRIMARY KEY (observation_id),
  CONSTRAINT gasifier_observations_site_id_fkey FOREIGN KEY (site_id) REFERENCES public.sites(site_id),
  CONSTRAINT gasifier_observations_lastupdated_by_fkey FOREIGN KEY (lastupdated_by) REFERENCES auth.users(id),
  CONSTRAINT gasifier_observations_program_id_fkey FOREIGN KEY (program_id) REFERENCES public.pilot_programs(program_id),
  CONSTRAINT gasifier_observations_last_updated_by_user_id_fkey FOREIGN KEY (last_updated_by_user_id) REFERENCES auth.users(id),
  CONSTRAINT gasifier_observations_submission_id_fkey FOREIGN KEY (submission_id) REFERENCES public.submissions(submission_id)
);
CREATE TABLE public.petri_observations (
  observation_id uuid NOT NULL DEFAULT gen_random_uuid(),
  submission_id uuid NOT NULL,
  site_id uuid NOT NULL,
  petri_code character varying NOT NULL,
  image_url text,
  fungicide_used USER-DEFINED NOT NULL,
  surrounding_water_schedule USER-DEFINED NOT NULL,
  notes character varying,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  program_name character varying,
  lastupdated_by uuid,
  plant_type USER-DEFINED DEFAULT 'Other Fresh Perishable'::plant_type_enum,
  program_id uuid,
  placement USER-DEFINED,
  placement_dynamics USER-DEFINED,
  last_updated_by_user_id uuid,
  last_edit_time timestamp with time zone DEFAULT now(),
  outdoor_temperature numeric,
  outdoor_humidity numeric,
  petri_growth_stage USER-DEFINED DEFAULT 'None'::petri_growth_stage,
  growth_index numeric DEFAULT '0'::numeric CHECK (growth_index < 11::numeric),
  order_index integer,
  x_position numeric,
  y_position numeric,
  footage_from_origin_x numeric DEFAULT '0'::numeric CHECK (footage_from_origin_x >= 0::numeric),
  footage_from_origin_y numeric DEFAULT 0 CHECK (footage_from_origin_y >= 0::numeric),
  growth_progression numeric DEFAULT 0.00 CHECK (growth_progression >= 0::numeric),
  growth_aggression numeric DEFAULT 0.00 CHECK (growth_aggression >= '-1000'::integer::numeric),
  growth_velocity real,
  daysInThisProgramPhase numeric,
  todays_day_of_phase numeric DEFAULT '0'::numeric,
  is_image_split boolean DEFAULT false,
  phase_observation_settings jsonb,
  is_missed_observation boolean DEFAULT false,
  main_petri_id uuid,
  is_split_source boolean DEFAULT false,
  split_processed boolean DEFAULT false,
  flag_for_review boolean,
  daysinthisprogramphase numeric DEFAULT 1,
  CONSTRAINT petri_observations_pkey PRIMARY KEY (observation_id),
  CONSTRAINT petri_observations_program_id_fkey FOREIGN KEY (program_id) REFERENCES public.pilot_programs(program_id),
  CONSTRAINT petri_observations_main_petri_id_fkey FOREIGN KEY (main_petri_id) REFERENCES public.petri_observations(observation_id),
  CONSTRAINT petri_observations_lastupdated_by_fkey FOREIGN KEY (lastupdated_by) REFERENCES auth.users(id),
  CONSTRAINT petri_observations_site_id_fkey FOREIGN KEY (site_id) REFERENCES public.sites(site_id),
  CONSTRAINT petri_observations_submission_id_fkey FOREIGN KEY (submission_id) REFERENCES public.submissions(submission_id),
  CONSTRAINT petri_observations_last_updated_by_user_id_fkey FOREIGN KEY (last_updated_by_user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.pilot_program_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  event_timestamp timestamp with time zone NOT NULL DEFAULT now(),
  update_type USER-DEFINED NOT NULL,
  object_id uuid NOT NULL,
  object_type text NOT NULL,
  program_id uuid,
  user_id uuid,
  user_email text,
  user_company text,
  user_role text,
  old_data jsonb,
  new_data jsonb,
  ip_address text,
  user_agent text,
  CONSTRAINT pilot_program_history_pkey PRIMARY KEY (id)
);
CREATE TABLE public.pilot_program_history_staging (
  id uuid,
  event_timestamp timestamp with time zone,
  update_type text,
  object_id uuid,
  object_type text,
  program_id uuid,
  user_id uuid,
  user_email text,
  user_company text,
  user_role text,
  old_data jsonb,
  new_data jsonb,
  ip_address text,
  user_agent text
);
CREATE TABLE public.pilot_program_users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  program_id uuid NOT NULL,
  user_id uuid NOT NULL,
  role USER-DEFINED NOT NULL DEFAULT 'Respond'::user_role_enum,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  user_email character varying,
  CONSTRAINT pilot_program_users_pkey PRIMARY KEY (id),
  CONSTRAINT pilot_program_users_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT pilot_program_users_program_id_fkey FOREIGN KEY (program_id) REFERENCES public.pilot_programs(program_id)
);
CREATE TABLE public.pilot_programs (
  program_id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL,
  description text NOT NULL,
  start_date date NOT NULL,
  end_date date NOT NULL,
  status USER-DEFINED NOT NULL,
  total_submissions integer DEFAULT 0,
  total_sites integer DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  lastupdated_by uuid,
  company_id uuid,
  cloned_from_program_id uuid,
  phases jsonb NOT NULL DEFAULT '[]'::jsonb,
  CONSTRAINT pilot_programs_pkey PRIMARY KEY (program_id),
  CONSTRAINT pilot_programs_lastupdated_by_fkey FOREIGN KEY (lastupdated_by) REFERENCES auth.users(id),
  CONSTRAINT pilot_programs_company_id_fkey FOREIGN KEY (company_id) REFERENCES public.companies(company_id),
  CONSTRAINT pilot_programs_cloned_from_program_id_fkey FOREIGN KEY (cloned_from_program_id) REFERENCES public.pilot_programs(program_id)
);
CREATE TABLE public.site_snapshots (
  snapshot_id uuid NOT NULL DEFAULT gen_random_uuid(),
  company_id uuid NOT NULL,
  program_id uuid NOT NULL,
  site_id uuid NOT NULL,
  site_code bigint NOT NULL,
  phase_descriptor character varying,
  snapshot_date date NOT NULL,
  placements_snapshot jsonb DEFAULT '{}'::jsonb,
  airflow_snapshot jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  day_number integer NOT NULL DEFAULT 1,
  snapshot_sequence integer DEFAULT 1,
  CONSTRAINT site_snapshots_pkey PRIMARY KEY (snapshot_id),
  CONSTRAINT site_snapshots_program_id_fkey FOREIGN KEY (program_id) REFERENCES public.pilot_programs(program_id),
  CONSTRAINT site_snapshots_site_id_fkey FOREIGN KEY (site_id) REFERENCES public.sites(site_id),
  CONSTRAINT site_snapshots_company_id_fkey FOREIGN KEY (company_id) REFERENCES public.companies(company_id)
);
CREATE TABLE public.sites (
  site_id uuid NOT NULL DEFAULT gen_random_uuid(),
  program_id uuid NOT NULL,
  name character varying NOT NULL,
  type USER-DEFINED NOT NULL,
  total_petris integer DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  program_name character varying,
  lastupdated_by uuid,
  submission_defaults jsonb,
  petri_defaults jsonb DEFAULT '[]'::jsonb,
  default_temperature numeric,
  default_humidity numeric,
  default_weather USER-DEFINED,
  default_indoor_temperature numeric CHECK (default_indoor_temperature >= 32::numeric AND default_indoor_temperature <= 120::numeric),
  default_indoor_humidity numeric CHECK (default_indoor_humidity >= 1::numeric AND default_indoor_humidity <= 100::numeric),
  gasifier_defaults jsonb DEFAULT '[]'::jsonb,
  total_gasifiers integer DEFAULT 0,
  square_footage numeric CHECK (square_footage >= 100::numeric AND square_footage <= 1000000000::numeric),
  cubic_footage numeric CHECK (cubic_footage >= 25::numeric AND cubic_footage <= 1000000::numeric),
  num_vents integer CHECK (num_vents >= 1 AND num_vents <= 10000),
  vent_placements ARRAY,
  primary_function USER-DEFINED,
  construction_material USER-DEFINED,
  insulation_type USER-DEFINED,
  hvac_system_present boolean DEFAULT false,
  hvac_system_type USER-DEFINED,
  irrigation_system_type USER-DEFINED,
  lighting_system USER-DEFINED,
  length numeric,
  width numeric,
  height numeric,
  min_efficacious_gasifier_density_sqft_per_bag numeric DEFAULT 2000,
  recommended_placement_density_bags integer,
  has_dead_zones boolean DEFAULT false,
  num_regularly_opened_ports integer,
  state text,
  country text,
  timezone text,
  interior_working_surface_types ARRAY,
  microbial_risk_zone USER-DEFINED DEFAULT 'Medium'::microbial_risk_zone_enum,
  quantity_deadzones integer CHECK (quantity_deadzones IS NULL OR quantity_deadzones >= 1 AND quantity_deadzones <= 25),
  ventilation_strategy USER-DEFINED,
  site_code bigint,
  Number of Fans integer CHECK ("Number of Fans" < 51),
  airflow_vectors jsonb DEFAULT '[]'::jsonb,
  door_details jsonb DEFAULT '[]'::jsonb,
  number_of_platforms smallint DEFAULT '0'::smallint,
  platform_details jsonb DEFAULT '[]'::jsonb,
  company_id uuid,
  fan_details jsonb,
  wall_details jsonb DEFAULT '[{"wall_id": "north_wall", "material": "Polycarbonate", "end_point": {"x": 110, "y": 0}, "length_ft": 110, "orientation": "North", "start_point": {"x": 0, "y": 0}, "justification": "outside"}, {"wall_id": "east_wall", "material": "Polycarbonate", "end_point": {"x": 110, "y": 100}, "length_ft": 100, "orientation": "East", "start_point": {"x": 110, "y": 0}, "justification": "outside"}, {"wall_id": "south_wall", "material": "Polycarbonate", "end_point": {"x": 0, "y": 100}, "length_ft": 110, "orientation": "South", "start_point": {"x": 110, "y": 100}, "justification": "outside"}, {"wall_id": "west_wall", "material": "Polycarbonate", "end_point": {"x": 0, "y": 0}, "length_ft": 100, "orientation": "West", "start_point": {"x": 0, "y": 100}, "justification": "outside"}]'::jsonb,
  CONSTRAINT sites_pkey PRIMARY KEY (site_id),
  CONSTRAINT sites_company_id_fkey FOREIGN KEY (company_id) REFERENCES public.companies(company_id),
  CONSTRAINT sites_lastupdated_by_fkey FOREIGN KEY (lastupdated_by) REFERENCES auth.users(id),
  CONSTRAINT sites_program_id_fkey FOREIGN KEY (program_id) REFERENCES public.pilot_programs(program_id)
);
CREATE TABLE public.split_petri_images (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  original_image_url text NOT NULL,
  main_petri_observation_id uuid NOT NULL,
  archived_at timestamp with time zone DEFAULT now(),
  processed_by_user_id uuid,
  CONSTRAINT split_petri_images_pkey PRIMARY KEY (id),
  CONSTRAINT split_petri_images_processed_by_user_id_fkey FOREIGN KEY (processed_by_user_id) REFERENCES auth.users(id),
  CONSTRAINT split_petri_images_main_petri_observation_id_fkey FOREIGN KEY (main_petri_observation_id) REFERENCES public.petri_observations(observation_id)
);
CREATE TABLE public.submission_sessions (
  session_id uuid NOT NULL DEFAULT gen_random_uuid(),
  submission_id uuid NOT NULL UNIQUE,
  site_id uuid NOT NULL,
  program_id uuid NOT NULL,
  opened_by_user_id uuid,
  session_start_time timestamp with time zone NOT NULL DEFAULT now(),
  last_activity_time timestamp with time zone NOT NULL DEFAULT now(),
  session_status USER-DEFINED NOT NULL DEFAULT 'Opened'::session_status_enum,
  completion_time timestamp with time zone,
  completed_by_user_id uuid,
  percentage_complete numeric NOT NULL DEFAULT 0.00,
  valid_petris_logged integer NOT NULL DEFAULT 0,
  valid_gasifiers_logged integer NOT NULL DEFAULT 0,
  escalated_to_user_ids ARRAY,
  CONSTRAINT submission_sessions_pkey PRIMARY KEY (session_id),
  CONSTRAINT submission_sessions_site_id_fkey FOREIGN KEY (site_id) REFERENCES public.sites(site_id),
  CONSTRAINT submission_sessions_completed_by_user_id_fkey FOREIGN KEY (completed_by_user_id) REFERENCES auth.users(id),
  CONSTRAINT submission_sessions_submission_id_fkey FOREIGN KEY (submission_id) REFERENCES public.submissions(submission_id),
  CONSTRAINT submission_sessions_program_id_fkey FOREIGN KEY (program_id) REFERENCES public.pilot_programs(program_id),
  CONSTRAINT submission_sessions_opened_by_user_id_fkey FOREIGN KEY (opened_by_user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.submissions (
  submission_id uuid NOT NULL DEFAULT gen_random_uuid(),
  site_id uuid NOT NULL,
  program_id uuid NOT NULL,
  temperature numeric NOT NULL,
  humidity numeric NOT NULL DEFAULT NULL::numeric,
  airflow USER-DEFINED NOT NULL,
  odor_distance USER-DEFINED NOT NULL,
  weather USER-DEFINED NOT NULL,
  notes character varying,
  created_by uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  program_name text,
  lastupdated_by uuid,
  indoor_temperature numeric CHECK (indoor_temperature >= 32::numeric AND indoor_temperature <= 120::numeric),
  indoor_humidity numeric CHECK (indoor_humidity >= 1::numeric AND indoor_humidity <= 100::numeric),
  global_submission_id bigint NOT NULL UNIQUE,
  submission_timezone text,
  CONSTRAINT submissions_pkey PRIMARY KEY (submission_id),
  CONSTRAINT submissions_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT submissions_lastupdated_by_fkey FOREIGN KEY (lastupdated_by) REFERENCES auth.users(id),
  CONSTRAINT submissions_site_id_fkey FOREIGN KEY (site_id) REFERENCES public.sites(site_id),
  CONSTRAINT submissions_program_id_fkey FOREIGN KEY (program_id) REFERENCES public.pilot_programs(program_id)
);
CREATE TABLE public.users (
  id uuid NOT NULL,
  email text NOT NULL UNIQUE,
  full_name text,
  company text,
  avatar_url text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  company_id uuid,
  is_company_admin boolean DEFAULT false,
  is_super_admin boolean DEFAULT false,
  is_active boolean DEFAULT true,
  CONSTRAINT users_pkey PRIMARY KEY (id),
  CONSTRAINT users_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id),
  CONSTRAINT users_company_id_fkey FOREIGN KEY (company_id) REFERENCES public.companies(company_id)
);