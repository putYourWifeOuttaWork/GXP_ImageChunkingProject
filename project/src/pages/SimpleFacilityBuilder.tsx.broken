import React, { useState, useEffect } from 'react';
import { SimpleFacilityFloorPlan } from '../components/mapping/SimpleFacilityFloorPlan';
import { supabase } from '../lib/supabaseClient';

interface Equipment {
  equipment_id: string;
  type: 'petri_dish' | 'gasifier' | 'sensor' | 'vent' | 'shelving' | 'door' | 'fan';
  label: string;
  x: number;
  y: number;
  z: number;
  radius: number;
  status: 'active' | 'inactive' | 'maintenance';
  config: any;
}

interface FacilityData {
  facility_info: {
    site_id: string;
    name: string;
    dimensions: { width: number; height: number; units: string };
    layout?: any;
    min_efficacious_gasifier_density_sqft_per_bag?: number;
  };
  equipment: Equipment[];
}

const SimpleFacilityBuilder: React.FC = () => {
  const [facilityData, setFacilityData] = useState<FacilityData | null>(null);
  const [sites, setSites] = useState<any[]>([]);
  const [selectedSiteId, setSelectedSiteId] = useState<string | null>(null);
  const [selectedTool, setSelectedTool] = useState<string | null>(null);
  const [selectedEquipment, setSelectedEquipment] = useState<Equipment | null>(null);
  const [isSaving, setIsSaving] = useState(false);
  const [editingEquipment, setEditingEquipment] = useState<Equipment | null>(null);
  const [showElementSettings, setShowElementSettings] = useState(false);
  const [showSiteSettings, setShowSiteSettings] = useState(false);
  const [editingSite, setEditingSite] = useState<any>(null);
  const [modalPosition, setModalPosition] = useState({ x: 0, y: 0 });
  const [isNewEquipment, setIsNewEquipment] = useState(false);

  // Load sites on mount
  useEffect(() => {
    loadSites();
  }, []);

  const loadSites = async () => {
    try {
      const { data, error } = await supabase
        .from('sites')
        .select('*')
        .order('name');
      
      if (error) throw error;
      setSites(data || []);
      
      if (data && data.length > 0 && !selectedSiteId) {
        setSelectedSiteId(data[0].site_id);
      }
    } catch (err) {
      console.error('Error loading sites:', err);
    }
  };

  // Load facility data when site changes
  useEffect(() => {
    if (selectedSiteId) {
      loadFacilityData(selectedSiteId);
    }
  }, [selectedSiteId]);

  const loadFacilityData = async (siteId: string) => {
    try {
      const { data: siteData, error } = await supabase
        .from('sites')
        .select('*')
        .eq('site_id', siteId)
        .single();

      if (error) throw error;

      // Parse equipment from various JSONB columns
      const equipment: Equipment[] = [];
      
      // Parse petri_defaults - default to 0,0 if no position
      if (siteData.petri_defaults && Array.isArray(siteData.petri_defaults)) {
        siteData.petri_defaults.forEach((petri: any) => {
          if (petri.petri_code) {
            equipment.push({
              equipment_id: petri.petri_code,
              type: 'petri_dish',
              label: petri.petri_code,
              x: petri.x_position || 0,
              y: petri.y_position || 0,
              z: 0,
              radius: 5,
              status: 'active',
              config: petri
            });
          }
        });
      }
      
      // Parse gasifier_defaults - use footage_from_origin if available
      if (siteData.gasifier_defaults && Array.isArray(siteData.gasifier_defaults)) {
        siteData.gasifier_defaults.forEach((gasifier: any) => {
          if (gasifier.gasifier_code) {
            equipment.push({
              equipment_id: gasifier.gasifier_code,
              type: 'gasifier',
              label: gasifier.gasifier_code,
              x: gasifier.footage_from_origin_x || gasifier.x_position || 0,
              y: gasifier.footage_from_origin_y || gasifier.y_position || 0,
              z: 0,
              radius: gasifier.effectiveness_radius || 15,
              status: 'active',
              config: gasifier
            });
          }
        });
      }
      
      // Parse door_details if available
      if (siteData.door_details && Array.isArray(siteData.door_details)) {
        siteData.door_details.forEach((door: any) => {
          if (door.door_id && door.position) {
            equipment.push({
              equipment_id: door.door_id,
              type: 'door',
              label: door.door_id,
              x: door.position.x || 0,
              y: door.position.y || 0,
              z: 0,
              radius: 0,
              status: 'active',
              config: door
            });
          }
        });
      }
      
      // Parse fan_details if available
      if (siteData.fan_details && Array.isArray(siteData.fan_details)) {
        siteData.fan_details.forEach((fan: any) => {
          if (fan.fanId && fan.directionality?.origin_point) {
            equipment.push({
              equipment_id: fan.fanId,
              type: 'fan',
              label: fan.fanId,
              x: fan.directionality.origin_point.x || 0,
              y: fan.directionality.origin_point.y || 0,
              z: 0,
              radius: 8,
              status: 'active',
              config: fan
            });
          }
        });
      }

      // Use actual dimensions from site data
      const dimensions = siteData.facility_dimensions || {
        width: siteData.length || 120,
        height: siteData.width || 80,
        units: 'feet'
      };

      const facilityData: FacilityData = {
        facility_info: {
          site_id: siteData.site_id,
          name: siteData.name,
          dimensions,
          layout: siteData.facility_layout,
          min_efficacious_gasifier_density_sqft_per_bag: siteData.min_efficacious_gasifier_density_sqft_per_bag || 2000
        },
        equipment
      };

      setFacilityData(facilityData);
    } catch (err) {
      console.error('Error loading facility data:', err);
    }
  };

  const handleEquipmentUpdate = (equipment: Equipment[]) => {
    if (!facilityData) return;
    setFacilityData({
      ...facilityData,
      equipment
    });
  };

  const handleSaveLayout = async () => {
    if (!facilityData || !selectedSiteId) return;

    setIsSaving(true);
    try {
      // Update the JSONB columns with new positions
      const petriDefaults = facilityData.equipment
        .filter(eq => eq.type === 'petri_dish')
        .map(eq => ({
          ...eq.config,
          petri_code: eq.equipment_id,
          x_position: eq.x,
          y_position: eq.y
        }));

      const gasifierDefaults = facilityData.equipment
        .filter(eq => eq.type === 'gasifier')
        .map(eq => ({
          ...eq.config,
          gasifier_code: eq.equipment_id,
          footage_from_origin_x: eq.x,
          footage_from_origin_y: eq.y
        }));

      const doorDetails = facilityData.equipment
        .filter(eq => eq.type === 'door')
        .map(eq => ({
          ...eq.config,
          door_id: eq.equipment_id,
          position: { x: eq.x, y: eq.y }
        }));

      const fanDetails = facilityData.equipment
        .filter(eq => eq.type === 'fan')
        .map(eq => ({
          ...eq.config,
          fanId: eq.equipment_id,
          directionality: {
            ...eq.config.directionality,
            origin_point: { x: eq.x, y: eq.y }
          }
        }));

      // Also save a complete layout snapshot
      const layoutToSave = {
        equipment: facilityData.equipment,
        lastModified: new Date().toISOString(),
        version: '1.0'
      };

      // Update the site with new equipment positions
      const updateData: any = {
        facility_layout: layoutToSave,
        facility_dimensions: facilityData.facility_info.dimensions,
        updated_at: new Date().toISOString()
      };

      // Only update JSONB columns if they have data
      if (petriDefaults.length > 0) updateData.petri_defaults = petriDefaults;
      if (gasifierDefaults.length > 0) updateData.gasifier_defaults = gasifierDefaults;
      if (doorDetails.length > 0) updateData.door_details = doorDetails;
      if (fanDetails.length > 0) updateData.fan_details = fanDetails;

      const { error } = await supabase
        .from('sites')
        .update(updateData)
        .eq('site_id', selectedSiteId);

      if (error) throw error;

      alert('Facility layout saved successfully!');
    } catch (err) {
      console.error('Error saving layout:', err);
      alert('Error saving facility layout');
    } finally {
      setIsSaving(false);
    }
  };

  const handleToolSelect = (toolType: string) => {
    setSelectedTool(toolType);
    setSelectedEquipment(null);
  };

  const handleEquipmentClick = (equipment: Equipment, event?: MouseEvent) => {
    // This is called on double-click to show modal
    setSelectedEquipment(equipment);
    setEditingEquipment({ ...equipment });
    setIsNewEquipment(false);
    
    // Set modal position based on event or default to center
    if (event) {
      setModalPosition({ x: event.clientX, y: event.clientY });
    } else {
      // Default to center of viewport
      setModalPosition({ 
        x: window.innerWidth / 2, 
        y: window.innerHeight / 2 
      });
    }
    
    setShowElementSettings(true);
  };

  const handleEquipmentSelect = (equipment: Equipment) => {
    // This is called on single-click to select/highlight
    setSelectedEquipment(equipment);
    setSelectedTool(null); // Clear any selected tool
  };

  const handleCanvasClick = (x: number, y: number, event?: MouseEvent) => {
    if (!selectedTool || !facilityData) return;

    const newEquipment: Equipment = {
      equipment_id: `${selectedTool}-${Date.now()}`,
      type: selectedTool as any,
      label: `New ${selectedTool.replace('_', ' ')}`,
      x,
      y,
      z: 0,
      radius: selectedTool === 'gasifier' ? 15 : selectedTool === 'fan' ? 8 : 5,
      status: 'active',
      config: {}
    };

    // Add equipment to the facility
    handleEquipmentUpdate([...facilityData.equipment, newEquipment]);
    
    // Open settings modal for the new equipment
    setEditingEquipment({ ...newEquipment });
    setSelectedEquipment(newEquipment);
    setIsNewEquipment(true);
    
    // Set modal position at click location
    if (event) {
      setModalPosition({ x: event.clientX, y: event.clientY });
    }
    
    setShowElementSettings(true);
    setSelectedTool(null);
  };

  const handleFacilityDoubleClick = () => {
    if (!selectedSiteId) return;
    
    const site = sites.find(s => s.site_id === selectedSiteId);
    if (site) {
      setEditingSite({ ...site });
      setShowSiteSettings(true);
    }
  };

  const handleSaveSiteSettings = async () => {
    if (!editingSite || !selectedSiteId) return;

    try {
      const { error } = await supabase
        .from('sites')
        .update({
          name: editingSite.name,
          length: editingSite.length,
          width: editingSite.width,
          height: editingSite.height,
          square_footage: editingSite.square_footage,
          cubic_footage: editingSite.cubic_footage,
          min_efficacious_gasifier_density_sqft_per_bag: editingSite.min_efficacious_gasifier_density_sqft_per_bag,
          facility_dimensions: {
            width: editingSite.length || 120,
            height: editingSite.width || 80,
            units: 'feet'
          },
          updated_at: new Date().toISOString()
        })
        .eq('site_id', selectedSiteId);

      if (error) throw error;

      // Reload sites and facility data
      await loadSites();
      await loadFacilityData(selectedSiteId);
      
      setShowSiteSettings(false);
      alert('Site settings saved successfully!');
    } catch (err) {
      console.error('Error saving site settings:', err);
      alert('Error saving site settings');
    }
  };

  const handleDeleteEquipment = () => {
    if (!selectedEquipment || !facilityData) return;

    const updatedEquipment = facilityData.equipment.filter(
      eq => eq.equipment_id !== selectedEquipment.equipment_id
    );
    
    handleEquipmentUpdate(updatedEquipment);
    setSelectedEquipment(null);
    setShowElementSettings(false);
  };

  const handleSaveEquipment = () => {
    if (!editingEquipment || !facilityData) return;

    const updatedEquipment = facilityData.equipment.map(eq => 
      eq.equipment_id === editingEquipment.equipment_id ? editingEquipment : eq
    );
    
    handleEquipmentUpdate(updatedEquipment);
    setShowElementSettings(false);
    setIsNewEquipment(false); // Mark as saved
  };

  const toolbarItems = [
    { id: 'petri_dish', label: 'Petri Dish', icon: '🧫', color: '#9CA3AF' },
    { id: 'gasifier', label: 'Gasifier', icon: '💨', color: '#6B7280' },
    { id: 'fan', label: 'Fan', icon: '🌀', color: '#6B7280' },
    { id: 'shelving', label: 'Shelving', icon: '📦', color: '#9CA3AF' },
    { id: 'vent', label: 'Vent', icon: '🔲', color: '#6B7280' },
    { id: 'sensor', label: 'Sensor', icon: '📡', color: '#9CA3AF' },
    { id: 'door', label: 'Door', icon: '🚪', color: '#4B5563' },
  ];

  return (
    <div className="simple-facility-builder h-screen flex flex-col bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-6">
            <h1 className="text-2xl font-semibold text-gray-900">
              Facility Site Builder
            </h1>
            <div className="text-sm text-gray-600">
              Edit Mode - Drag equipment to position them
            </div>
          </div>

          {/* Site Selection */}
          <div className="flex items-center gap-4">
            <select
              className="px-4 py-2 border border-gray-300 rounded-md"
              value={selectedSiteId || ''}
              onChange={(e) => setSelectedSiteId(e.target.value)}
            >
              <option value="">Select a site...</option>
              {sites.map(site => (
                <option key={site.site_id} value={site.site_id}>
                  {site.name} ({site.length}x{site.width} ft)
                </option>
              ))}
            </select>

            <button
              onClick={handleSaveLayout}
              disabled={isSaving}
              className="px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50"
            >
              {isSaving ? 'Saving...' : '💾 Save Layout'}
            </button>
          </div>
        </div>
      </div>

      <div className="flex-1 flex">
        {/* Main Canvas Area */}
        <div className="flex-1 relative bg-gray-100 p-6">
          {facilityData ? (
            <SimpleFacilityFloorPlan
              facilityData={facilityData}
              onEquipmentClick={handleEquipmentClick}
              onEquipmentSelect={handleEquipmentSelect}
              onCanvasClick={handleCanvasClick}
              onEquipmentUpdate={handleEquipmentUpdate}
              onFacilityDoubleClick={handleFacilityDoubleClick}
              selectedTool={selectedTool}
              selectedEquipment={selectedEquipment}
              width={900}
              height={500}
              compact={true}
            />
          ) : (
            <div className="flex items-center justify-center h-full">
              <p className="text-gray-500">Select a site to start building</p>
            </div>
          )}
        </div>

        {/* Right Sidebar - Toolbar */}
        <div className="w-80 bg-white border-l border-gray-200 p-6 space-y-6">
          <div className="bg-gray-50 rounded-lg p-4">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">🛠️ Equipment Toolbar</h3>
            <p className="text-sm text-gray-600 mb-4">
              Click to select, then click on the map to place equipment.
            </p>
            <div className="space-y-2">
              {toolbarItems.map(tool => (
                <button
                  key={tool.id}
                  onClick={() => handleToolSelect(tool.id)}
                  className={`w-full flex items-center gap-3 px-4 py-3 rounded-md transition-colors ${
                    selectedTool === tool.id
                      ? 'bg-blue-600 text-white'
                      : 'bg-white border border-gray-300 hover:bg-gray-50'
                  }`}
                >
                  <span className="text-xl">{tool.icon}</span>
                  <span className="font-medium flex-1 text-left">{tool.label}</span>
                  {selectedTool !== tool.id && (
                    <div
                      className="w-4 h-4 rounded-full"
                      style={{ backgroundColor: tool.color }}
                    />
                  )}
                </button>
              ))}
            </div>
          </div>

          {/* Instructions */}
          <div className="bg-blue-50 rounded-lg p-4">
            <h3 className="text-sm font-semibold text-blue-800 mb-2">Instructions</h3>
            <ul className="text-sm text-blue-700 space-y-1">
              <li>• Equipment at (0,0) needs positioning</li>
              <li>• Drag equipment to move them</li>
              <li>• Click equipment to edit properties</li>
              <li>• Save updates equipment positions</li>
            </ul>
          </div>

        </div>
      </div>

      {/* Element Settings Modal - moved outside main content */}
      {showElementSettings && editingEquipment && (
        <>
          {/* Backdrop to close on click */}
          <div 
            className="fixed inset-0 z-40 bg-black bg-opacity-10" 
            onClick={() => {
                  // Check if this is new equipment
                  if (isNewEquipment) {
                    if (confirm('This equipment has not been saved. Are you sure you want to cancel?')) {
                      // Remove the unsaved equipment
                      if (facilityData) {
                        const updatedEquipment = facilityData.equipment.filter(
                          eq => eq.equipment_id !== editingEquipment.equipment_id
                        );
                        handleEquipmentUpdate(updatedEquipment);
                      }
                      setShowElementSettings(false);
                      setIsNewEquipment(false);
                    }
                  } else {
                    setShowElementSettings(false);
                  }
            }}
          />
          <div 
            className="fixed bg-white rounded-xl shadow-2xl w-80 max-h-[80vh] overflow-hidden z-50 border border-gray-200"
            style={{
              left: `${Math.min(modalPosition.x, window.innerWidth - 320)}px`,
              top: `${Math.min(modalPosition.y, window.innerHeight - 400)}px`,
              transform: 'translate(-50%, -20%)'
            }}
          >
                {/* Header */}
                <div className="bg-gradient-to-r from-gray-50 to-gray-100 px-5 py-4 border-b border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-800">Element Settings</h3>
                  <p className="text-sm text-gray-500 mt-1">{editingEquipment.type.replace(/_/g, ' ')}</p>
                </div>
                
                {/* Content */}
                <div className="p-5 overflow-y-auto max-h-[calc(80vh-180px)]">
              
              <div className="space-y-4">
                {/* Basic Info */}
                <div className="bg-gray-50 p-3 rounded">
                  <p className="text-sm font-medium text-gray-600">Type: <span className="text-gray-900">{editingEquipment.type}</span></p>
                  <p className="text-sm font-medium text-gray-600">ID: <span className="text-gray-900">{editingEquipment.equipment_id}</span></p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Label:
                  </label>
                  <input
                    type="text"
                    value={editingEquipment.label}
                    onChange={(e) => setEditingEquipment({
                      ...editingEquipment,
                      label: e.target.value
                    })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>

                <div className="grid grid-cols-2 gap-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      X Position:
                    </label>
                    <input
                      type="number"
                      value={editingEquipment.x.toFixed(1)}
                      onChange={(e) => setEditingEquipment({
                        ...editingEquipment,
                        x: parseFloat(e.target.value) || 0
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Y Position:
                    </label>
                    <input
                      type="number"
                      value={editingEquipment.y.toFixed(1)}
                      onChange={(e) => setEditingEquipment({
                        ...editingEquipment,
                        y: parseFloat(e.target.value) || 0
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>
                </div>

                {/* Equipment-specific properties - Editable */}
                {editingEquipment.type === 'gasifier' && (
                  <div className="border-t pt-4">
                    <h4 className="text-sm font-semibold mb-3">Gasifier Properties</h4>
                    <div className="space-y-3">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Chemical Type:</label>
                        <select
                          value={editingEquipment.config.chemical_type || ''}
                          onChange={(e) => setEditingEquipment({
                            ...editingEquipment,
                            config: { ...editingEquipment.config, chemical_type: e.target.value }
                          })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md"
                        >
                          <option value="">Select...</option>
                          <option value="Citronella Blend">Citronella Blend</option>
                          <option value="Essential Oils Blend">Essential Oils Blend</option>
                          <option value="CLO2">CLO2</option>
                          <option value="Custom">Custom</option>
                        </select>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Placement Height:</label>
                        <select
                          value={editingEquipment.config.placement_height || ''}
                          onChange={(e) => setEditingEquipment({
                            ...editingEquipment,
                            config: { ...editingEquipment.config, placement_height: e.target.value }
                          })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md"
                        >
                          <option value="">Select...</option>
                          <option value="Low">Low</option>
                          <option value="Medium">Medium</option>
                          <option value="High">High</option>
                        </select>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Placement Strategy:</label>
                        <select
                          value={editingEquipment.config.placement_strategy || ''}
                          onChange={(e) => setEditingEquipment({
                            ...editingEquipment,
                            config: { ...editingEquipment.config, placement_strategy: e.target.value }
                          })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md"
                        >
                          <option value="">Select...</option>
                          <option value="Centralized Coverage">Centralized Coverage</option>
                          <option value="Perimeter Coverage">Perimeter Coverage</option>
                          <option value="Distributed Coverage">Distributed Coverage</option>
                        </select>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Directional Placement:</label>
                        <input
                          type="text"
                          value={editingEquipment.config.directional_placement || ''}
                          onChange={(e) => setEditingEquipment({
                            ...editingEquipment,
                            config: { ...editingEquipment.config, directional_placement: e.target.value }
                          })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md"
                          placeholder="e.g., Center-Center, Front-Left"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Effectiveness Radius:</label>
                        <input
                          type="number"
                          value={editingEquipment.radius || 15}
                          onChange={(e) => setEditingEquipment({
                            ...editingEquipment,
                            radius: parseFloat(e.target.value) || 15
                          })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md"
                        />
                      </div>
                    </div>
                  </div>
                )}

                {editingEquipment.type === 'petri_dish' && (
                  <div className="border-t pt-4">
                    <h4 className="text-sm font-semibold mb-3">Petri Dish Properties</h4>
                    <div className="space-y-3">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Placement:</label>
                        <select
                          value={editingEquipment.config.placement || ''}
                          onChange={(e) => setEditingEquipment({
                            ...editingEquipment,
                            config: { ...editingEquipment.config, placement: e.target.value }
                          })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md"
                        >
                          <option value="">Select...</option>
                          <option value="Front-Left">Front-Left</option>
                          <option value="Front-Right">Front-Right</option>
                          <option value="Center-Center">Center-Center</option>
                          <option value="Back-Left">Back-Left</option>
                          <option value="Back-Right">Back-Right</option>
                        </select>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Plant Type:</label>
                        <input
                          type="text"
                          value={editingEquipment.config.plant_type || ''}
                          onChange={(e) => setEditingEquipment({
                            ...editingEquipment,
                            config: { ...editingEquipment.config, plant_type: e.target.value }
                          })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md"
                          placeholder="e.g., Other Fresh Perishable"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Fungicide Used:</label>
                        <select
                          value={editingEquipment.config.fungicide_used || ''}
                          onChange={(e) => setEditingEquipment({
                            ...editingEquipment,
                            config: { ...editingEquipment.config, fungicide_used: e.target.value }
                          })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md"
                        >
                          <option value="">Select...</option>
                          <option value="Yes">Yes</option>
                          <option value="No">No</option>
                        </select>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Placement Dynamics:</label>
                        <select
                          value={editingEquipment.config.placement_dynamics || ''}
                          onChange={(e) => setEditingEquipment({
                            ...editingEquipment,
                            config: { ...editingEquipment.config, placement_dynamics: e.target.value }
                          })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md"
                        >
                          <option value="">Select...</option>
                          <option value="Near Door">Near Door</option>
                          <option value="Near Airflow In">Near Airflow In</option>
                          <option value="Near Airflow Out">Near Airflow Out</option>
                          <option value="Isolated">Isolated</option>
                        </select>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Water Schedule:</label>
                        <select
                          value={editingEquipment.config.surrounding_water_schedule || ''}
                          onChange={(e) => setEditingEquipment({
                            ...editingEquipment,
                            config: { ...editingEquipment.config, surrounding_water_schedule: e.target.value }
                          })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md"
                        >
                          <option value="">Select...</option>
                          <option value="Daily">Daily</option>
                          <option value="Every Other Day">Every Other Day</option>
                          <option value="Every Third Day">Every Third Day</option>
                          <option value="Weekly">Weekly</option>
                        </select>
                      </div>
                    </div>
                  </div>
                )}

                {editingEquipment.type === 'fan' && editingEquipment.config && (
                  <div className="border-t pt-4">
                    <h4 className="text-sm font-semibold mb-2">Fan Properties</h4>
                    {editingEquipment.config.magnitude_cfm && (
                      <p className="text-sm"><span className="font-medium">CFM:</span> {editingEquipment.config.magnitude_cfm}</p>
                    )}
                    {editingEquipment.config.percentage_of_time_blowing && (
                      <p className="text-sm"><span className="font-medium">Active %:</span> {editingEquipment.config.percentage_of_time_blowing}%</p>
                    )}
                    {editingEquipment.config.directionality?.terminal_point && (
                      <p className="text-sm"><span className="font-medium">Direction to:</span> ({editingEquipment.config.directionality.terminal_point.x}, {editingEquipment.config.directionality.terminal_point.y})</p>
                    )}
                  </div>
                )}

                {editingEquipment.type === 'door' && editingEquipment.config && (
                  <div className="border-t pt-4">
                    <h4 className="text-sm font-semibold mb-2">Door Properties</h4>
                    {editingEquipment.config.frequency_opened && (
                      <p className="text-sm"><span className="font-medium">Frequency:</span> {editingEquipment.config.frequency_opened}</p>
                    )}
                    {editingEquipment.config.average_duration_minutes && (
                      <p className="text-sm"><span className="font-medium">Avg Duration:</span> {editingEquipment.config.average_duration_minutes} min</p>
                    )}
                  </div>
                )}

                {/* Display all config properties dynamically */}
                {editingEquipment.config && Object.keys(editingEquipment.config).length > 0 && (
                  <div className="border-t pt-4">
                    <h4 className="text-sm font-semibold mb-3">All Properties</h4>
                    <div className="space-y-2">
                      {Object.entries(editingEquipment.config).map(([key, value]) => (
                        <div key={key} className="text-sm">
                          <span className="font-medium text-gray-600">
                            {key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}:
                          </span>{' '}
                          <span className="text-gray-900">
                            {typeof value === 'object' ? JSON.stringify(value) : String(value || '-')}
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Raw Config Data */}
                <details className="border-t pt-4">
                  <summary className="text-sm font-medium cursor-pointer hover:text-blue-600">
                    View Raw Configuration JSON
                  </summary>
                  <pre className="mt-2 text-xs bg-gray-100 p-2 rounded overflow-x-auto">
                    {JSON.stringify(editingEquipment, null, 2)}
                  </pre>
                </details>

                </div>
                
                {/* Footer Actions */}
                <div className="border-t border-gray-200 bg-gray-50 px-5 py-3 flex gap-2">
                  <button
                    onClick={handleSaveEquipment}
                    className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors font-medium text-sm"
                  >
                    Save
                  </button>
                  <button
                    onClick={() => {
                      if (isNewEquipment) {
                        // Remove the unsaved equipment
                        if (facilityData) {
                          const updatedEquipment = facilityData.equipment.filter(
                            eq => eq.equipment_id !== editingEquipment.equipment_id
                          );
                          handleEquipmentUpdate(updatedEquipment);
                        }
                      }
                      setShowElementSettings(false);
                      setIsNewEquipment(false);
                    }}
                    className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors font-medium text-sm"
                  >
                    Cancel
                  </button>
                  {!isNewEquipment && (
                    <button
                      onClick={handleDeleteEquipment}
                      className="px-4 py-2 bg-red-50 text-red-600 rounded-lg hover:bg-red-100 transition-colors font-medium text-sm"
                    >
                      Delete
                    </button>
                  )}
                </div>
          </div>
        </>
      )}

      {/* Site Settings Modal */}
      {showSiteSettings && editingSite && (
        <>
              {/* Backdrop to close on click */}
              <div 
                className="fixed inset-0 z-40" 
                onClick={() => setShowSiteSettings(false)}
              />
              <div className="absolute top-6 left-6 bg-white rounded-lg shadow-lg p-6 w-96 max-h-[80vh] overflow-y-auto z-50">
              <h3 className="text-lg font-semibold mb-4">Site Settings</h3>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Site Name:
                  </label>
                  <input
                    type="text"
                    value={editingSite.name || ''}
                    onChange={(e) => setEditingSite({
                      ...editingSite,
                      name: e.target.value
                    })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>

                <div className="grid grid-cols-3 gap-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Length (ft):
                    </label>
                    <input
                      type="number"
                      value={editingSite.length || ''}
                      onChange={(e) => setEditingSite({
                        ...editingSite,
                        length: parseFloat(e.target.value) || 0,
                        square_footage: (parseFloat(e.target.value) || 0) * (editingSite.width || 0),
                        cubic_footage: (parseFloat(e.target.value) || 0) * (editingSite.width || 0) * (editingSite.height || 0)
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Width (ft):
                    </label>
                    <input
                      type="number"
                      value={editingSite.width || ''}
                      onChange={(e) => setEditingSite({
                        ...editingSite,
                        width: parseFloat(e.target.value) || 0,
                        square_footage: (editingSite.length || 0) * (parseFloat(e.target.value) || 0),
                        cubic_footage: (editingSite.length || 0) * (parseFloat(e.target.value) || 0) * (editingSite.height || 0)
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Height (ft):
                    </label>
                    <input
                      type="number"
                      value={editingSite.height || ''}
                      onChange={(e) => setEditingSite({
                        ...editingSite,
                        height: parseFloat(e.target.value) || 0,
                        cubic_footage: (editingSite.length || 0) * (editingSite.width || 0) * (parseFloat(e.target.value) || 0)
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Square Footage:
                    </label>
                    <input
                      type="number"
                      value={editingSite.square_footage || ''}
                      readOnly
                      className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Cubic Footage:
                    </label>
                    <input
                      type="number"
                      value={editingSite.cubic_footage || ''}
                      readOnly
                      className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Gasifier Coverage (sq ft per bag):
                  </label>
                  <input
                    type="number"
                    value={editingSite.min_efficacious_gasifier_density_sqft_per_bag || 2000}
                    onChange={(e) => setEditingSite({
                      ...editingSite,
                      min_efficacious_gasifier_density_sqft_per_bag: parseFloat(e.target.value) || 2000
                    })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>

                {/* Additional Site Metadata */}
                <div className="border-t pt-4">
                  <h4 className="text-sm font-semibold mb-2">Additional Information</h4>
                  
                  {editingSite.type && (
                    <p className="text-sm"><span className="font-medium">Type:</span> {editingSite.type}</p>
                  )}
                  {editingSite.primary_function && (
                    <p className="text-sm"><span className="font-medium">Function:</span> {editingSite.primary_function}</p>
                  )}
                  {editingSite.construction_material && (
                    <p className="text-sm"><span className="font-medium">Material:</span> {editingSite.construction_material}</p>
                  )}
                  {editingSite.hvac_system_type && (
                    <p className="text-sm"><span className="font-medium">HVAC:</span> {editingSite.hvac_system_type}</p>
                  )}
                  {editingSite.ventilation_strategy && (
                    <p className="text-sm"><span className="font-medium">Ventilation:</span> {editingSite.ventilation_strategy}</p>
                  )}
                </div>

                {/* Equipment List - Collapsible */}
                {facilityData && facilityData.equipment.length > 0 && (
                  <details className="border-t pt-4">
                    <summary className="text-sm font-semibold cursor-pointer hover:text-blue-600 mb-3">
                      Equipment List ({facilityData.equipment.length} items)
                    </summary>
                    <div className="text-xs space-y-1 max-h-64 overflow-y-auto border rounded p-2">
                      {facilityData.equipment.map(eq => (
                        <div
                          key={eq.equipment_id}
                          className={`p-2 rounded cursor-pointer ${
                            selectedEquipment?.equipment_id === eq.equipment_id
                              ? 'bg-blue-100 border-blue-300 border'
                              : 'hover:bg-gray-100'
                          }`}
                          onClick={() => {
                            // Single click to select/highlight
                            handleEquipmentSelect(eq);
                          }}
                          onDoubleClick={() => {
                            // Double click to edit
                            handleEquipmentClick(eq);
                          }}
                        >
                          <div className="font-medium">{eq.label}</div>
                          <div className="text-gray-500">
                            {eq.type} at ({eq.x.toFixed(1)}, {eq.y.toFixed(1)})
                          </div>
                        </div>
                      ))}
                    </div>
                  </details>
                )}

                <div className="flex gap-3 pt-4 border-t">
                  <button
                    onClick={handleSaveSiteSettings}
                    className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
                  >
                    Save Settings
                  </button>
                  <button
                    onClick={() => setShowSiteSettings(false)}
                    className="flex-1 bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </div>
        </>
      )}
    </div>
  );
};

export default SimpleFacilityBuilder;